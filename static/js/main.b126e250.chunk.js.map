{"version":3,"sources":["logo.svg","Map.js","Results.js","LocationPicker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","withScriptjs","withGoogleMap","props","defaultZoom","zoom","defaultCenter","center","places","map","place","key","id","position","lat","parseFloat","latitude","lng","longitude","circle","radius","options","Spinner","require","Results","run","startDate","selectedOption","ltd","long","useState","loading","setLoading","Date","data","setData","circleData","name","useEffect","a","console","log","fetchData","Math","sqrt","strokeColor","style","fontSize","date","monthDay","getDate","month","getMonth","years","getFullYear","convertToNormal","googleMapURL","loadingElement","height","containerElement","mapElement","mapStyles","width","MapContainer","google","this","initialCenter","Component","tf","GoogleApiWrapper","apiKey","Form","model","currentData","showResults","setShowResults","value","onChange","setOption","setLatitude","setLongitude","setStartDate","arr","hello","val","label","day","year","startInputDate","main","onSubmit","className","for","clearIcon","class","event","target","opt","display","justifyContent","marginBottom","flexDirection","htmlFor","type","evt","start_date","STAT_CAUSE_DISC","LATITUDE","LONGITUDE","tempDate","daysIntoYear","doy","STAT_CAUSE_CODE","toint","predictModel","tempPredict","toFixed","fireSize","contDiff","doyIntoDays","end_date","UTC","setDate","toLowerCase","DISCOVERY_DOY","loadGraphModel","catch","err","abs","predict","tensor","contained","fireSizeClass","containDiff","fireSizeVerBottom","fireSizeVerTop","App","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b126e250.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Fragment} from \"react\";\nimport {\n  withGoogleMap,\n  GoogleMap,\n  withScriptjs,\n  Marker,\n  Circle\n} from \"react-google-maps\";\n\nconst Map = props => {\n    return (\n      <GoogleMap\n        defaultZoom={props.zoom}\n        defaultCenter={props.center}\n      >\n        {props.places.map(place => {\n          return (\n            <Fragment key={place.id}>\n              <Marker\n                position={{\n                  lat: parseFloat(place.latitude),\n                  lng: parseFloat(place.longitude)\n                }}\n              />\n              {place.circle && <Circle\n                defaultCenter={{\n                  lat: parseFloat(place.latitude),\n                  lng: parseFloat(place.longitude)\n                }}\n                radius={place.circle.radius}\n                options={place.circle.options}\n              />}\n            </Fragment>\n          );\n        })}\n      </GoogleMap>\n    );\n}\n\nexport default withScriptjs(withGoogleMap(Map));","import React,{useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport Map from './Map';\nvar Spinner = require('react-spinkit');\n\n\nconst Results = ({run, startDate, selectedOption, ltd, long}) =>{\n    const [loading, setLoading] = useState(false);\n    const[data, setData] = useState([0, new Date(\"October 13, 2013 11:13:00\")]);\n    const[radius, setRadius] = useState();\n    const convertToNormal = (date) => {\n        var monthDay = date.getDate();\n        var month = date.getMonth() + 1;\n        var years = date.getFullYear();\n        return `${monthDay}-${month}-${years}`;\n    }\n    const circleData = [{\n        id: 1,\n        name: \"Park Slope\",\n        latitude: ltd,\n        longitude: long,\n    }]\n\n    useEffect(() => {\n        setLoading(true);\n        const fetchData = async() => {\n            console.log(ltd);\n            const a = await run(startDate, selectedOption, ltd, long);\n            setData(a);\n        }\n        fetchData();\n        setLoading(false);\n    })\n\n    circleData[0].circle = {\n        radius: (Math.sqrt((data[0]*5152.62)/3.1415)),\n        options: {\n            strokeColor: \"#ff0000\"\n        }\n    }\n    \n    return loading ? (\n        <Spinner name='folding-cube'/>\n    ):(\n        <div>\n            <p style = {{fontSize: '28px'}}>Acres Burnt</p>\n            <p style = {{fontSize: '35px'}}>{data[0]}</p>\n            <p style = {{fontSize: '28px'}}>End Date</p>\n            <p style = {{fontSize: '35px'}}>{convertToNormal(data[1])}</p>\n            <Map\n                center={{ lat: 1 * ltd, lng: 1 * long}}\n                zoom={10}\n                places={circleData}\n                googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCf_xsnmKqpegq5y1oL-kOwGziFRauYZTo\"\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElement={<div style={{ height: `800px` }} />}\n                mapElement={<div style={{ height: `100%` }} />}\n            />\n        </div>\n    )\n\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\n\nconst mapStyles = {\n  width: '500px',\n  height: '80%'\n};\n\nexport class MapContainer extends Component {\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={{\n         lat: -1.2884,\n         lng: 36.8233\n        }}\n      />\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCf_xsnmKqpegq5y1oL-kOwGziFRauYZTo'\n})(MapContainer);","import React, {useState, useEffect} from 'react';\nimport './index.css';\nimport logo from './logo.svg';\nimport Results from './Results';\nimport DatePicker from 'react-date-picker';\nimport LocationPicker from './LocationPicker';\nconst tf = require(\"@tensorflow/tfjs\");\nconst { model } = require(\"@tensorflow/tfjs\");\n\nconst App = () =>{\n  const [data, setData] = useState({'data' : [0,1]});\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n  })\n  return (\n    <div class = 'App'>\n      <img src=\"https://media.discordapp.net/attachments/733836130277130263/734525199701115022/unknown.png?width=347&height=324\" alt=\"logo\"></img>\n      <Form currentData = {data} setData = {setData}/>\n    </div>\n  )//Put a bit of padding below the blueskyai picture. \n\n}\n\nconst Form = ({setData, currentData}) => {\n  const [showResults, setShowResults] = useState(false);\n  const [value, onChange] = useState(new Date());//  mm/dd/yyyy in a string\n  const [selectedOption, setOption] = useState('Children');\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [startDate, setStartDate] = useState('01/01/0000');\n  const arr = [\"Lightning\", \"Equipment Use\", \"Smoking\", \"Campfire\", \"Debris Burning\", \"Railroad\", \"Arson\", \"Children\", \"Misc/other\", \"Fireworks\", \"Power Line\", \"Structure\", \"Missing\"]\n  const options = arr.map((val) => {return {value: val, label: val}})\n  const hello = async() => {\n    //var a = await main()\n    var month = value.getMonth() + 1;\n    var day = value.getDate();\n    var year = value.getFullYear();\n    var startInputDate = `${month}/${day}/${year}`;\n    setStartDate(startInputDate);\n    setShowResults(true);\n  }\n  return showResults ? (\n    <Results run = {main} startDate = {startDate} selectedOption = {selectedOption} ltd = {latitude} \n      long = {longitude}\n    />\n  ):(\n    <form onSubmit={\n      hello\n    }>\n      <div>\n        <label className = 'label' for=\"lname\">Start Date</label>\n        <DatePicker id = 'date' clearIcon = {null} className = 'input' value = {value} onChange = {onChange}/>\n      </div>\n      <div class = 'custom-select'>\n        <label className = 'label' for=\"cause\">Cause</label>\n        <div>\n          <select onChange = {(event) => {setOption(event.target.value)}}>\n            {arr.map((opt) => {return <option value = {opt}>{opt}</option>})}\n          </select>\n        </div>\n      </div>\n      <div style = {{display: 'flex', justifyContent: 'space-evenly', marginBottom: '30px'}}>\n        <div style = {{display: 'flex', flexDirection: 'column'}}>\n          <label id='lat' htmlFor=\"lname\">Latitude</label>\n          <input className = 'locInput' type='number' onChange = {(evt) => setLatitude(evt.target.value)}\n          ></input>\n        </div>\n        <div style = {{display: 'flex', flexDirection: 'column'}}>\n          <label id='long' htmlFor=\"lname\">Longitude</label>\n          <input class = 'locInput' type='number' onChange = {(evt) => setLongitude(evt.target.value)}\n          ></input>\n        </div>\n      </div>\n      <input className = 'input' id = \"submitButton\" type=\"submit\" value=\"Submit\" />\n    </form> \n  )\n}\n\nasync function main(start_date, STAT_CAUSE_DISC, LATITUDE, LONGITUDE){\n  let tempDate = daysIntoYear(start_date)/* This is formatted as dd/mm/yyyy but is flexible for some reason? We should try to consider year when outputting date also. */\n  let doy = tempDate[0]\n  let year = tempDate[1]\n  let STAT_CAUSE_CODE = toint(STAT_CAUSE_DISC)\n  let tempPredict = await predictModel(doy, STAT_CAUSE_CODE, LATITUDE, LONGITUDE, year)// Can we explicitly convert lat/long to float?\n  let fireSize = await tempPredict[0].toFixed(0);\n  let contDiff = await tempPredict[1].toFixed(0);\n  let years = tempPredict[2];\n  let end_date = await doyIntoDays(contDiff, years);\n  //console.log(end_date)\n  return [fireSize, end_date] // Make sure we get only the first 10 characters, as we don't care about the hours/minutes/seconds, only the date\n}\n\nfunction daysIntoYear(date){\n  var date = new Date(date)\n  let doy = (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n  let year = date.getFullYear();// I think this only works if the year is first. \n  return [doy, year]\n}\n\nfunction doyIntoDays(day, year){\n  var date = new Date(year, 0)\n  return new Date(date.setDate(day))\n}\n\nfunction toint(STAT_CAUSE_DISC) {\n  let STAT_CAUSE_CODE = 13;\n  if (STAT_CAUSE_DISC.toLowerCase() == \"lightning\"){\n      STAT_CAUSE_CODE = 1;\n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"equipment use\"){\n      STAT_CAUSE_CODE = 2; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"smoking\"){\n      STAT_CAUSE_CODE = 3; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"campfire\"){\n      STAT_CAUSE_CODE = 4; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"debris burning\"){\n      STAT_CAUSE_CODE = 5; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"railroad\"){\n      STAT_CAUSE_CODE = 6; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"arson\"){\n      STAT_CAUSE_CODE = 7; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"children\"){\n      STAT_CAUSE_CODE = 8; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"misc/other\"){\n      STAT_CAUSE_CODE = 9; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"fireworks\"){\n      STAT_CAUSE_CODE = 10; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"power line\"){\n      STAT_CAUSE_CODE = 11; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"structure\"){\n      STAT_CAUSE_CODE = 12; \n  }\n  else if (STAT_CAUSE_DISC.toLowerCase() == \"missing\"){\n      STAT_CAUSE_CODE = 13; \n  }\n  else{\n      STAT_CAUSE_CODE = 13;\n  }\n  return STAT_CAUSE_CODE\n}\n\nasync function predictModel (DISCOVERY_DOY, STAT_CAUSE_CODE, LATITUDE, LONGITUDE, year){\n  let model = await tf.loadGraphModel(\"https://stanley-zheng.github.io/BlueSky-AI/saves/model.json\").catch(err => console.log(err))//https://drive.google.com/uc?export=download&id=1SLh4UDSRMH8YXdFd_nWaqKwCc0AlNajX\n  DISCOVERY_DOY = DISCOVERY_DOY/366\n  STAT_CAUSE_CODE= STAT_CAUSE_CODE/13\n  LATITUDE = (Math.abs(LATITUDE)-25)/48\n  LONGITUDE = (Math.abs(LONGITUDE)-50)/116\n  let label = await model.predict(tf.tensor([[[DISCOVERY_DOY, STAT_CAUSE_CODE, LATITUDE, LONGITUDE]]]))\n  label = await label.data()\n  let contained = Math.abs(label[0]*366)\n  let fireSize = Math.abs(label[1]*606945)\n  let fireSizeClass = Math.abs(label[2]*7).toFixed(0);\n  let containDiff = 0;\n  let fireSizeVerBottom = 0;\n  let fireSizeVerTop = 0;\n  if (contained > DISCOVERY_DOY*366){\n      containDiff = contained;\n      //console.log('contained>discovery')\n  }\n  else if (contained<DISCOVERY_DOY*366){\n      containDiff = Math.abs(contained)+365;\n      year += 1\n      //console.log('contained<discovery')\n  }\n  //console.log(fireSizeClass)\n  if (fireSizeClass==1){\n      fireSizeVerBottom=0;\n      fireSizeVerTop=0.25;\n  }\n  else if (fireSizeClass==2){\n      fireSizeVerBottom=0.26;\n      fireSizeVerTop=9.99;\n  }\n  else if (fireSizeClass==3){\n      fireSizeVerBottom=10;\n      fireSizeVerTop=99.99;\n  }\n  else if (fireSizeClass==4){\n      fireSizeVerBottom=100;\n      fireSizeVerTop=299.99;\n  }\n  else if (fireSizeClass==5){\n      fireSizeVerBottom=300;\n      fireSizeVerTop=999.99;\n  }\n  else if (fireSizeClass==6){\n      fireSizeVerBottom=1000;\n      fireSizeVerTop=4999.99;\n  }\n  else if (fireSizeClass==7){\n      fireSizeVerBottom=5000;\n      fireSizeVerTop=100000;\n  }\n  else {\n      fireSizeVerTop = 100000;\n      fireSizeVerBottom = 20;\n  }\n  if (fireSize>fireSizeVerTop){\n      fireSize = (fireSizeVerBottom+fireSize)/2;\n  }\n  else if (fireSize<fireSizeVerBottom*0.75){\n      let fireSizeAvg = (fireSizeVerTop+fireSizeVerBottom)/2;\n      fireSize = (fireSizeAvg + fireSize)/2;\n  }\n  return [fireSize, containDiff, year]\n}\n\n/* <select class='input' name=\"causeList\" id=\"causeList\">\n          {arr.map((cause) => {return <option class = 'causeOption' value = {cause}>{cause}</option>})}\n        </select> */\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}